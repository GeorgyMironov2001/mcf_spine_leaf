import numpy as np
import random
import math
import json
import os
from pathlib import Path
import pulp
from ortools.constraint_solver import pywrapcp
from ortools.sat.python import cp_model
import networkx as nx
import concurrent.futures
import threading
import multiprocessing
from copy import deepcopy

np.random.seed(1)


def ranking_is_correct(ranking, spines):
    ranking = np.asarray(ranking)
    tasks = len(ranking)
    leaves = len(ranking[0])
    for leaf_hosts in ranking.sum(axis=0):
        if leaf_hosts > spines:
            return False
    return True


def get_ranking_graph(t, l, s, ranking):
    G = nx.Graph()
    leaves_host_number_on_tasks = [
        [(task, ranking[task][leaf]) for task in range(t)] for leaf in range(l)
    ]
    for leaf in leaves_host_number_on_tasks:
        for task_id, size in leaf:
            for i in range(1, size + 1):
                for j in range(i + 1, size + 1):
                    G.add_edge(f"{task_id}_{i}", f"{task_id}_{j}")
        for from_ in range(0, len(leaf)):
            for to_ in range(from_ + 1, len(leaf)):
                task_from, size_from = leaf[from_]
                task_to, size_to = leaf[to_]
                for i in range(1, size_from + 1):
                    for j in range(1, size_to + 1):
                        G.add_edge(f"{task_from}_{i}", f"{task_to}_{j}")
    return G


def generate_test_alpha(tasks, leaves, spines, alpha=1, task_distribution=None):
    res = []
    bounds = [spines] * leaves
    task_prob = np.ones(leaves, dtype=np.float64)
    for task in range(tasks):
        task_location = [0] * leaves
        # task_prob = np.ones(leaves, dtype=np.float64)
        for leaf in range(leaves):
            if bounds[leaf] == 0:
                task_prob[leaf] = 0
        if task_distribution is None:
            two_power_border = int(
                math.log2(1 + min(max(bounds), sum(bounds) - 2 * (tasks - task - 1)))
            )
            two_power = 2 ** np.random.choice(list(range(1, two_power_border + 1)))
        else:
            two_power = task_distribution[task]
        for host in range(two_power):
            if np.sum(task_prob) == 0:
                break
            host_leaf = np.random.choice(
                np.arange(leaves), p=task_prob / np.sum(task_prob)
            )
            task_location[host_leaf] += 1
            bounds[host_leaf] -= 1
            if bounds[host_leaf] > 0:
                task_prob[host_leaf] = math.e ** (alpha * (spines - bounds[host_leaf]))
            else:
                task_prob[host_leaf] = 0
        res.append(task_location)
    return res


def generate_tests_alpha(
    tasks, leaves, spines, alpha=1, test_num=1, task_distribution=None
):
    ranking = generate_test_alpha(tasks, leaves, spines, alpha, task_distribution)

    if not ranking_is_correct(ranking, spines):
        return None
    ranking = sorted(ranking, key=lambda x: sum(x))
    ranking = np.asarray(ranking)
    ranking = ranking[:, ranking.sum(axis=0).argsort()]
    return ranking


def interval_ranking_coloring(t, l, s, ranking):
    layers = {}
    leaf_to_layers = [[] for leaf in range(l)]
    for task in range(t):
        H = max(ranking[task])

        for leaf in range(l):
            for size in range(1, ranking[task][leaf] + 1):
                if f"{task}_{size}" not in layers:
                    layers[f"{task}_{size}"] = set()
                layers[f"{task}_{size}"].add(leaf)
                leaf_to_layers[leaf].append(f"{task}_{size}")
    G = get_ranking_graph(t, l, s, ranking)
    coloring = {}
    for leaf in range(l):
        for leaf_layer in leaf_to_layers[leaf]:
            if leaf_layer in coloring:
                continue
            used_colors = {
                coloring[node] for node in G.neighbors(leaf_layer) if node in coloring
            }
            color_cnt = 0
            while color_cnt in used_colors:
                color_cnt += 1
            coloring[leaf_layer] = color_cnt
    return layers, leaf_to_layers, coloring


def get_neighbor_ranking(t, l, s, ranking: np.ndarray) -> np.ndarray:
    tasks_pairs = []

    for t1 in range(t):
        for t2 in range(t1 + 1, t):
            # Boolean masks for leaves
            l1_mask = (ranking[t1] < s) & (ranking[t2] > 0)
            l2_mask = (ranking[t1] > 0) & (ranking[t2] < s)

            l1_cnt = np.where(l1_mask)[0]
            l2_cnt = np.where(l2_mask)[0]

            if l1_cnt.size == 0 or l2_cnt.size == 0:
                continue

            # Skip if l1_cnt == l2_cnt and length == 1
            if l1_cnt.size == 1 and np.array_equal(l1_cnt, l2_cnt):
                continue

            # Calculate potentials and probabilities
            # For each element in l1_cnt, count how many elements in l2_cnt are greater
            indices = np.searchsorted(l2_cnt, l1_cnt, side="right")
            counts = l2_cnt.size - indices
            p = counts.sum()

            if p == 0:
                continue

            tasks_pairs.append((t1, t2, p, l1_cnt, counts))

    if not tasks_pairs:
        return ranking.copy()

    # Normalize probabilities for task pairs
    p_vals = np.array([x[2] for x in tasks_pairs], dtype=np.float64)
    p_vals /= p_vals.sum()

    # Select a task pair randomly weighted by p_vals
    idx = np.random.choice(len(tasks_pairs), p=p_vals)
    t1, t2, prob, l1_potentials, probs1 = tasks_pairs[idx]

    # Normalize probabilities for l1_potentials
    probs1_norm = probs1 / probs1.sum()
    l1 = np.random.choice(l1_potentials, p=probs1_norm)

    # Select l2 candidates satisfying constraints
    l2_candidates_mask = (np.arange(l) > l1) & (ranking[t2] < s) & (ranking[t1] > 0)
    l2_candidates = np.where(l2_candidates_mask)[0]

    if l2_candidates.size == 0:
        return ranking.copy()

    l2 = np.random.choice(l2_candidates)

    # Create a copy of ranking and update
    new_ranking = ranking.copy()
    new_ranking[t1, l1] += 1
    new_ranking[t1, l2] -= 1
    new_ranking[t2, l1] -= 1
    new_ranking[t2, l2] += 1

    return new_ranking


def top_k_elements(arr, k=3):
    arr = np.array(arr)
    # Get indices of top k elements (unsorted)
    idx_unsorted = np.argpartition(arr, -k)[-k:]
    # Sort these indices by their values in descending order
    idx_sorted = idx_unsorted[np.argsort(arr[idx_unsorted])[::-1]]
    top_values = arr[idx_sorted]
    return idx_sorted, top_values


def get_neighbor_ranking_sily(t, l, s, ranking):
    neighborhood = []
    for t1 in range(t):
        for t2 in range(t1 + 1, t):
            max_1 = max(ranking[t1])
            max_2 = max(ranking[t2])

            l1_max = set(
                [
                    leaf
                    for leaf in range(l)
                    if ranking[t1][leaf] == max_1 and ranking[t2][leaf] < s
                ]
            )
            l2_max = set(
                [
                    leaf
                    for leaf in range(l)
                    if ranking[t2][leaf] == max_2 and ranking[t1][leaf] < s
                ]
            )
            if len(l1_max) > 0 and len(l2_max) > 0:
                if (l1_max == l2_max) and len(l1_max) == 1:
                    continue

                common = len(l1_max & l2_max)

                neighborhood.append([t1, t2, len(l1_max) * len(l2_max) - common])

    if len(neighborhood) == 0:
        return ranking
    p = [x[2] for x in neighborhood]
    all_sum = sum(p)
    p = [x / all_sum for x in p]
    pos = np.random.choice(list(range(len(neighborhood))), p=p)

    t1, t2, _ = neighborhood[pos]
    # _, max_1 = top_k_elements(ranking[t1])
    # _, max_2 = top_k_elements(ranking[t2])
    max_1 = max(ranking[t1])
    max_2 = max(ranking[t2])
    l1_max = list(
        [
            leaf
            for leaf in range(l)
            if ranking[t1][leaf] == max_1 and ranking[t2][leaf] < s
        ]
    )
    l2_max = list(
        [
            leaf
            for leaf in range(l)
            if ranking[t2][leaf] == max_2 and ranking[t1][leaf] < s
        ]
    )

    l1, l2 = None, None
    if len(l1_max) == 1:
        l1 = l1_max[0]
        if l1 in l2_max:
            l2_max.remove(l1)
        l2 = np.random.choice(l2_max)
    elif len(l2_max) == 1:
        l2 = l2_max[0]
        if l2 in l1_max:
            l1_max.remove(l2)
        l1 = np.random.choice(l1_max)
    else:
        l1 = np.random.choice(l1_max)
        if l1 in l2_max:
            l2_max.remove(l1)
        l2 = np.random.choice(l2_max)
    new_ranking = deepcopy(ranking)
    new_ranking[t1][l1] -= 1
    new_ranking[t1][l2] += 1
    new_ranking[t2][l1] += 1
    new_ranking[t2][l2] -= 1
    return new_ranking


def count_colors(t, l, s, ranking):
    _, _, coloring = interval_ranking_coloring(t, l, s, ranking)
    return len(set(coloring.values()))


def simulated_anealling(t, l, s, ranking, get_new_ranking, max_iter=10000):
    colors = count_colors(t, l, s, ranking)
    for i in range(max_iter):
        if colors <= s:
            # print(f"finished in {i} iterations")
            break
        T = max_iter / (i + 1)
        new_ranking = get_new_ranking(t, l, s, ranking)
        if (new_ranking - ranking).any() == 0:
            # print(f"finished in {i} iterations")
            break
        new_colors = count_colors(t, l, s, new_ranking)
        if new_colors < colors:
            colors = new_colors
            ranking = deepcopy(new_ranking)
            continue

        if np.pow(np.e, (colors - new_colors) / T) > np.random.uniform(0, 1):
            colors = new_colors
            ranking = deepcopy(new_ranking)
            continue
    return ranking, colors


def make_test(t, l, s, task_distribution, get_new_ranking):

    start_ranking = generate_tests_alpha(
        t, l, s, alpha=0.0, test_num=1, task_distribution=task_distribution
    )
    if start_ranking is None:
        return None, None

    ranking, colors = simulated_anealling(
        t, l, s, start_ranking, get_new_ranking, max_iter=10000
    )
    _, _, coloring = interval_ranking_coloring(t, l, s, ranking)
    return ranking, coloring


def worker_func(x):
    tasks, leaves, spines, task_distribution, get_new_ranking, lock, shared_dict = x
    ranking, coloring = make_test(
        tasks, leaves, spines, task_distribution, get_new_ranking
    )
    if ranking is None:
        return
    if len(set(coloring.values())) > spines:
        return
    if not ranking_is_correct(ranking, spines):
        return
    ranking = tuple([tuple(map(int, row)) for row in ranking])
    with lock:
        if ranking not in shared_dict:
            shared_dict[ranking] = coloring
    # if ranking not in shared_dict:
    #     shared_dict[ranking] = coloring


def generate_tests(
    tasks,
    leaves,
    spines,
    test_num,
    task_distribution,
    get_new_ranking,
    lock,
    shared_dict,
):
    with multiprocessing.Pool(30) as pool:
        pool.map(
            worker_func,
            [
                (
                    tasks,
                    leaves,
                    spines,
                    task_distribution,
                    get_new_ranking,
                    lock,
                    shared_dict,
                )
                for _ in range(test_num)
            ],
        )


if __name__ == "__main__":
    manager = multiprocessing.Manager()
    lock = manager.Lock()

    tests = [
        [2, 8, 4, 1000, [16, 16], 0],
        [3, 8, 4, 1000, [8, 8, 16], 0],
        [4, 8, 4, 1000, [8, 8, 8, 8], 0],
        [4, 8, 4, 1000, [4, 4, 8, 16], 1],
        [2, 16, 8, 1000, [64, 64], 0],
        [3, 16, 8, 1000, [32, 32, 64], 0],
        [4, 16, 8, 1000, [32, 32, 32, 32], 0],
        [4, 16, 8, 1000, [16, 16, 32, 64], 1],
        [5, 16, 8, 1000, [16, 16, 16, 16, 64], 0],
        [5, 16, 8, 1000, [16, 16, 32, 32, 32], 1],
        [5, 16, 8, 1000, [8, 8, 16, 32, 64], 2],
        [6, 16, 8, 1000, [8, 8, 16, 16, 16, 64], 0],
        [6, 16, 8, 1000, [8, 8, 16, 32, 32, 32], 1],
        [6, 16, 8, 1000, [8, 8, 8, 8, 32, 64], 2],
        [6, 16, 8, 1000, [16, 16, 16, 16, 32, 32], 3],
        [6, 16, 8, 1000, [4, 4, 8, 16, 32, 64], 4],
        [7, 16, 8, 1000, [8, 8, 8, 8, 32, 32, 32], 0],
        [7, 16, 8, 1000, [4, 4, 8, 16, 16, 16, 64], 1],
        [7, 16, 8, 1000, [8, 8, 8, 8, 16, 16, 64], 2],
        [7, 16, 8, 1000, [4, 4, 4, 4, 16, 32, 64], 3],
        [7, 16, 8, 1000, [4, 4, 8, 16, 32, 32, 32], 4],
        [7, 16, 8, 1000, [16, 16, 16, 16, 16, 16, 32], 5],
        [7, 16, 8, 1000, [4, 4, 8, 8, 8, 32, 64], 6],
        [7, 16, 8, 1000, [8, 8, 16, 16, 16, 32, 32], 7],
        [8, 16, 8, 1000, [8, 8, 16, 16, 16, 16, 16, 32], 0],
        [8, 16, 8, 1000, [4, 4, 8, 16, 16, 16, 32, 32], 1],
        [8, 16, 8, 1000, [16, 16, 16, 16, 16, 16, 16, 16], 2],
        [8, 16, 8, 1000, [8, 8, 8, 8, 8, 8, 16, 64], 3],
        [8, 16, 8, 1000, [8, 8, 8, 8, 16, 16, 32, 32], 4],
        [8, 16, 8, 1000, [4, 4, 8, 8, 8, 32, 32, 32], 5],
        [8, 16, 8, 1000, [4, 4, 4, 4, 16, 16, 16, 64], 6],
        [8, 16, 8, 1000, [4, 4, 4, 4, 16, 32, 32, 32], 7],
        [8, 16, 8, 1000, [4, 4, 8, 8, 8, 16, 16, 64], 8],
        [8, 16, 8, 1000, [4, 4, 4, 4, 8, 8, 32, 64], 9],
        [2, 32, 16, 1000, [256, 256], 0],
        [3, 32, 16, 1000, [128, 128, 256], 0],
        [4, 32, 16, 1000, [128, 128, 128, 128], 0],
        [4, 32, 16, 1000, [64, 64, 128, 256], 1],
        [5, 32, 16, 1000, [64, 64, 64, 64, 256], 0],
        [5, 32, 16, 1000, [32, 32, 64, 128, 256], 1],
        [5, 32, 16, 1000, [64, 64, 128, 128, 128], 2],
        [6, 32, 16, 1000, [16, 16, 32, 64, 128, 256], 0],
        [6, 32, 16, 1000, [32, 32, 64, 64, 64, 256], 1],
        [6, 32, 16, 1000, [32, 32, 32, 32, 128, 256], 2],
        [6, 32, 16, 1000, [32, 32, 64, 128, 128, 128], 3],
        [6, 32, 16, 1000, [64, 64, 64, 64, 128, 128], 4],
        [7, 32, 16, 1000, [32, 32, 64, 64, 64, 128, 128], 0],
        [7, 32, 16, 1000, [8, 8, 16, 32, 64, 128, 256], 1],
        [7, 32, 16, 1000, [16, 16, 16, 16, 64, 128, 256], 2],
        [7, 32, 16, 1000, [32, 32, 32, 32, 64, 64, 256], 3],
        [7, 32, 16, 1000, [64, 64, 64, 64, 64, 64, 128], 4],
        [7, 32, 16, 1000, [16, 16, 32, 32, 32, 128, 256], 5],
        [7, 32, 16, 1000, [16, 16, 32, 64, 64, 64, 256], 6],
        [7, 32, 16, 1000, [16, 16, 32, 64, 128, 128, 128], 7],
        [7, 32, 16, 1000, [32, 32, 32, 32, 128, 128, 128], 8],
        [8, 32, 16, 1000, [16, 16, 16, 16, 32, 32, 128, 256], 0],
        [8, 32, 16, 1000, [32, 32, 64, 64, 64, 64, 64, 128], 1],
        [8, 32, 16, 1000, [16, 16, 16, 16, 64, 64, 64, 256], 2],
        [8, 32, 16, 1000, [8, 8, 16, 32, 32, 32, 128, 256], 3],
        [8, 32, 16, 1000, [4, 4, 8, 16, 32, 64, 128, 256], 4],
        [8, 32, 16, 1000, [16, 16, 32, 64, 64, 64, 128, 128], 5],
        [8, 32, 16, 1000, [16, 16, 32, 32, 32, 128, 128, 128], 6],
        [8, 32, 16, 1000, [64, 64, 64, 64, 64, 64, 64, 64], 7],
        [8, 32, 16, 1000, [16, 16, 32, 32, 32, 64, 64, 256], 8],
        [8, 32, 16, 1000, [8, 8, 16, 32, 64, 128, 128, 128], 9],
        [9, 32, 16, 1000, [32, 32, 64, 64, 64, 64, 64, 64, 64], 0],
        [9, 32, 16, 1000, [4, 4, 8, 16, 32, 64, 128, 128, 128], 1],
        [9, 32, 16, 1000, [4, 4, 8, 16, 32, 32, 32, 128, 256], 2],
        [9, 32, 16, 1000, [32, 32, 32, 32, 32, 32, 64, 128, 128], 3],
        [9, 32, 16, 1000, [8, 8, 16, 16, 16, 64, 128, 128, 128], 4],
        [9, 32, 16, 1000, [8, 8, 16, 32, 32, 32, 128, 128, 128], 5],
        [9, 32, 16, 1000, [8, 8, 16, 32, 64, 64, 64, 128, 128], 6],
        [9, 32, 16, 1000, [16, 16, 32, 32, 32, 32, 32, 64, 256], 7],
        [9, 32, 16, 1000, [8, 8, 16, 16, 16, 64, 64, 64, 256], 8],
        [9, 32, 16, 1000, [32, 32, 32, 32, 64, 64, 64, 64, 128], 9],
        [10, 32, 16, 1000, [8, 8, 8, 8, 32, 32, 32, 128, 128, 128], 0],
        [10, 32, 16, 1000, [4, 4, 8, 8, 8, 32, 64, 128, 128, 128], 1],
        [10, 32, 16, 1000, [4, 4, 8, 8, 8, 32, 64, 64, 64, 256], 2],
        [10, 32, 16, 1000, [8, 8, 8, 8, 16, 16, 32, 32, 128, 256], 3],
        [10, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 64, 128, 256], 4],
        [10, 32, 16, 1000, [32, 32, 32, 32, 32, 32, 64, 64, 64, 128], 5],
        [10, 32, 16, 1000, [8, 8, 16, 16, 16, 32, 32, 128, 128, 128], 6],
        [10, 32, 16, 1000, [16, 16, 16, 16, 16, 16, 32, 128, 128, 128], 7],
        [10, 32, 16, 1000, [4, 4, 8, 16, 32, 32, 32, 64, 64, 256], 8],
        [10, 32, 16, 1000, [32, 32, 32, 32, 64, 64, 64, 64, 64, 64], 9],
        [11, 32, 16, 1000, [8, 8, 16, 16, 16, 16, 16, 16, 16, 128, 256], 0],
        [11, 32, 16, 1000, [4, 4, 8, 8, 8, 32, 32, 32, 64, 64, 256], 1],
        [11, 32, 16, 1000, [4, 4, 8, 8, 8, 8, 8, 16, 64, 128, 256], 2],
        [11, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 64, 128, 128, 128], 3],
        [11, 32, 16, 1000, [4, 4, 8, 8, 8, 32, 32, 32, 128, 128, 128], 4],
        [11, 32, 16, 1000, [32, 32, 32, 32, 32, 32, 32, 32, 64, 64, 128], 5],
        [11, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 8, 8, 64, 128, 256], 6],
        [11, 32, 16, 1000, [16, 16, 16, 16, 16, 16, 16, 16, 64, 64, 256], 7],
        [11, 32, 16, 1000, [16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 256], 8],
        [11, 32, 16, 1000, [8, 8, 8, 8, 16, 16, 32, 32, 64, 64, 256], 9],
        [12, 32, 16, 1000, [4, 4, 8, 16, 16, 16, 16, 16, 32, 64, 64, 256], 0],
        [12, 32, 16, 1000, [8, 8, 16, 16, 16, 16, 16, 32, 64, 64, 128, 128], 1],
        [12, 32, 16, 1000, [16, 16, 16, 16, 16, 16, 32, 32, 32, 64, 128, 128], 2],
        [12, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 16, 16, 32, 128, 256], 3],
        [12, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 8, 8, 64, 128, 128, 128], 4],
        [12, 32, 16, 1000, [4, 4, 4, 4, 4, 4, 8, 16, 16, 64, 128, 256], 5],
        [12, 32, 16, 1000, [4, 4, 4, 4, 8, 8, 16, 16, 64, 64, 64, 256], 6],
        [12, 32, 16, 1000, [4, 4, 4, 4, 16, 32, 32, 32, 64, 64, 128, 128], 7],
        [12, 32, 16, 1000, [32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 128], 8],
        [12, 32, 16, 1000, [4, 4, 8, 16, 16, 16, 32, 32, 32, 32, 64, 256], 9],
        [13, 32, 16, 1000, [8, 8, 16, 32, 32, 32, 32, 32, 32, 32, 64, 64, 128], 0],
        [13, 32, 16, 1000, [4, 4, 8, 16, 16, 16, 64, 64, 64, 64, 64, 64, 64], 1],
        [13, 32, 16, 1000, [4, 4, 4, 4, 4, 4, 4, 4, 32, 32, 32, 128, 256], 2],
        [13, 32, 16, 1000, [4, 4, 4, 4, 4, 4, 8, 32, 32, 32, 128, 128, 128], 3],
        [13, 32, 16, 1000, [8, 8, 16, 16, 16, 32, 32, 32, 32, 32, 32, 128, 128], 4],
        [13, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 16, 32, 32, 32, 32, 64, 256], 5],
        [13, 32, 16, 1000, [4, 4, 4, 4, 4, 4, 8, 32, 64, 64, 64, 128, 128], 6],
        [13, 32, 16, 1000, [16, 16, 16, 16, 32, 32, 32, 32, 64, 64, 64, 64, 64], 7],
        [13, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 32, 32, 32, 32, 64, 256], 8],
        [13, 32, 16, 1000, [4, 4, 4, 4, 4, 4, 8, 16, 16, 64, 128, 128, 128], 9],
        [14, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 32, 32, 64, 64, 64, 64, 128], 0],
        [14, 32, 16, 1000, [4, 4, 4, 4, 16, 32, 32, 32, 64, 64, 64, 64, 64, 64], 1],
        [14, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 8, 8, 64, 64, 64, 64, 64, 128], 2],
        [14, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 16, 16, 16, 32, 64, 64, 128, 128], 3],
        [14, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 16, 16, 16, 16, 128, 128, 128], 4],
        [14, 32, 16, 1000, [4, 4, 8, 8, 8, 8, 8, 16, 16, 16, 32, 64, 64, 256], 5],
        [14, 32, 16, 1000, [8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 64, 256], 6],
        [14, 32, 16, 1000, [4, 4, 4, 4, 8, 8, 16, 16, 64, 64, 64, 64, 64, 128], 7],
        [14, 32, 16, 1000, [4, 4, 8, 8, 8, 8, 8, 16, 64, 64, 64, 64, 64, 128], 8],
        [14, 32, 16, 1000, [4, 4, 8, 8, 8, 32, 32, 32, 32, 32, 32, 32, 128, 128], 9],
        [15, 32, 16, 1000, [4, 4, 4, 4, 8, 8, 8, 8, 16, 32, 32, 64, 64, 128, 128], 0],
        [15, 32, 16, 1000, [4, 4, 4, 4, 8, 8, 32, 32, 32, 32, 32, 64, 64, 64, 128], 1],
        [15, 32, 16, 1000, [4, 4, 4, 4, 8, 8, 32, 32, 32, 64, 64, 64, 64, 64, 64], 2],
        [
            15,
            32,
            16,
            1000,
            [8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 32, 32, 64, 128, 128],
            3,
        ],
        [15, 32, 16, 1000, [4, 4, 8, 8, 8, 16, 16, 16, 16, 16, 16, 32, 32, 64, 256], 4],
        [
            15,
            32,
            16,
            1000,
            [8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 16, 16, 32, 64, 256],
            5,
        ],
        [15, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 32, 128, 256], 6],
        [
            15,
            32,
            16,
            1000,
            [8, 8, 8, 8, 32, 32, 32, 32, 32, 32, 32, 32, 32, 64, 128],
            7,
        ],
        [15, 32, 16, 1000, [8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 32, 64, 64, 256], 8],
        [
            15,
            32,
            16,
            1000,
            [8, 8, 16, 16, 16, 16, 16, 16, 16, 32, 32, 64, 64, 64, 128],
            9,
        ],
        [
            16,
            32,
            16,
            1000,
            [8, 8, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 32, 64, 64, 128],
            0,
        ],
        [
            16,
            32,
            16,
            1000,
            [8, 8, 8, 8, 16, 16, 16, 16, 32, 32, 32, 32, 32, 64, 64, 128],
            1,
        ],
        [
            16,
            32,
            16,
            1000,
            [4, 4, 4, 4, 16, 16, 16, 16, 16, 32, 32, 32, 64, 64, 64, 128],
            2,
        ],
        [
            16,
            32,
            16,
            1000,
            [4, 4, 4, 4, 8, 8, 8, 8, 16, 16, 16, 16, 16, 128, 128, 128],
            3,
        ],
        [
            16,
            32,
            16,
            1000,
            [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 64, 64, 64, 128],
            4,
        ],
        [
            16,
            32,
            16,
            1000,
            [8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 64, 64, 128, 128],
            5,
        ],
        [
            16,
            32,
            16,
            1000,
            [4, 4, 4, 4, 4, 4, 4, 4, 16, 16, 64, 64, 64, 64, 64, 128],
            6,
        ],
        [
            16,
            32,
            16,
            1000,
            [16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 32, 64, 64, 128],
            7,
        ],
        [16, 32, 16, 1000, [4, 4, 4, 4, 8, 8, 8, 8, 16, 64, 64, 64, 64, 64, 64, 64], 8],
        [
            16,
            32,
            16,
            1000,
            [8, 8, 8, 8, 8, 8, 16, 16, 16, 32, 32, 32, 32, 32, 128, 128],
            9,
        ],
        [2, 64, 32, 100, [1024, 1024], 0],
        [3, 64, 32, 100, [512, 512, 1024], 0],
        [4, 64, 32, 100, [512, 512, 512, 512], 0],
        [4, 64, 32, 100, [256, 256, 512, 1024], 1],
        [5, 64, 32, 100, [256, 256, 512, 512, 512], 0],
        [5, 64, 32, 100, [256, 256, 256, 256, 1024], 1],
        [5, 64, 32, 100, [128, 128, 256, 512, 1024], 2],
        [6, 64, 32, 100, [256, 256, 256, 256, 512, 512], 0],
        [6, 64, 32, 100, [128, 128, 256, 256, 256, 1024], 1],
        [6, 64, 32, 100, [128, 128, 128, 128, 512, 1024], 2],
        [6, 64, 32, 100, [64, 64, 128, 256, 512, 1024], 3],
        [6, 64, 32, 100, [128, 128, 256, 512, 512, 512], 4],
        [7, 64, 32, 100, [128, 128, 128, 128, 256, 256, 1024], 0],
        [7, 64, 32, 100, [128, 128, 256, 256, 256, 512, 512], 1],
        [7, 64, 32, 100, [256, 256, 256, 256, 256, 256, 512], 2],
        [7, 64, 32, 100, [64, 64, 128, 256, 256, 256, 1024], 3],
        [7, 64, 32, 100, [32, 32, 64, 128, 256, 512, 1024], 4],
        [7, 64, 32, 100, [64, 64, 64, 64, 256, 512, 1024], 5],
        [7, 64, 32, 100, [64, 64, 128, 256, 512, 512, 512], 6],
        [7, 64, 32, 100, [64, 64, 128, 128, 128, 512, 1024], 7],
        [7, 64, 32, 100, [128, 128, 128, 128, 512, 512, 512], 8],
        [8, 64, 32, 100, [16, 16, 32, 64, 128, 256, 512, 1024], 0],
        [8, 64, 32, 100, [64, 64, 64, 64, 256, 256, 256, 1024], 1],
        [8, 64, 32, 100, [32, 32, 64, 128, 256, 512, 512, 512], 2],
        [8, 64, 32, 100, [256, 256, 256, 256, 256, 256, 256, 256], 3],
        [8, 64, 32, 100, [128, 128, 128, 128, 256, 256, 512, 512], 4],
        [8, 64, 32, 100, [128, 128, 128, 128, 128, 128, 256, 1024], 5],
        [8, 64, 32, 100, [64, 64, 64, 64, 128, 128, 512, 1024], 6],
        [8, 64, 32, 100, [32, 32, 64, 128, 256, 256, 256, 1024], 7],
        [8, 64, 32, 100, [32, 32, 64, 64, 64, 256, 512, 1024], 8],
        [8, 64, 32, 100, [32, 32, 32, 32, 128, 256, 512, 1024], 9],
        [9, 64, 32, 100, [32, 32, 32, 32, 128, 256, 256, 256, 1024], 0],
        [9, 64, 32, 100, [128, 128, 256, 256, 256, 256, 256, 256, 256], 1],
        [9, 64, 32, 100, [32, 32, 32, 32, 128, 128, 128, 512, 1024], 2],
        [9, 64, 32, 100, [64, 64, 64, 64, 128, 128, 512, 512, 512], 3],
        [9, 64, 32, 100, [64, 64, 64, 64, 256, 256, 256, 512, 512], 4],
        [9, 64, 32, 100, [64, 64, 128, 256, 256, 256, 256, 256, 512], 5],
        [9, 64, 32, 100, [128, 128, 128, 128, 128, 128, 128, 128, 1024], 6],
        [9, 64, 32, 100, [64, 64, 128, 128, 128, 128, 128, 256, 1024], 7],
        [9, 64, 32, 100, [128, 128, 128, 128, 128, 128, 256, 512, 512], 8],
        [9, 64, 32, 100, [32, 32, 64, 64, 64, 256, 256, 256, 1024], 9],
        [10, 64, 32, 100, [8, 8, 8, 8, 32, 64, 128, 256, 512, 1024], 0],
        [10, 64, 32, 100, [8, 8, 16, 32, 64, 128, 256, 512, 512, 512], 1],
        [10, 64, 32, 100, [16, 16, 32, 64, 64, 64, 256, 256, 256, 1024], 2],
        [10, 64, 32, 100, [32, 32, 32, 32, 128, 256, 256, 256, 512, 512], 3],
        [10, 64, 32, 100, [16, 16, 32, 64, 128, 128, 128, 256, 256, 1024], 4],
        [10, 64, 32, 100, [16, 16, 32, 32, 32, 64, 64, 256, 512, 1024], 5],
        [10, 64, 32, 100, [16, 16, 32, 32, 32, 128, 256, 512, 512, 512], 6],
        [10, 64, 32, 100, [16, 16, 32, 32, 32, 128, 256, 256, 256, 1024], 7],
        [10, 64, 32, 100, [16, 16, 16, 16, 64, 128, 256, 256, 256, 1024], 8],
        [10, 64, 32, 100, [16, 16, 32, 64, 64, 64, 128, 128, 512, 1024], 9],
        [11, 64, 32, 100, [8, 8, 16, 16, 16, 64, 64, 64, 256, 512, 1024], 0],
        [11, 64, 32, 100, [4, 4, 4, 4, 16, 32, 64, 128, 256, 512, 1024], 1],
        [11, 64, 32, 100, [32, 32, 64, 128, 256, 256, 256, 256, 256, 256, 256], 2],
        [11, 64, 32, 100, [32, 32, 64, 64, 64, 64, 64, 128, 512, 512, 512], 3],
        [11, 64, 32, 100, [32, 32, 32, 32, 64, 64, 128, 128, 512, 512, 512], 4],
        [11, 64, 32, 100, [16, 16, 16, 16, 16, 16, 32, 128, 256, 512, 1024], 5],
        [11, 64, 32, 100, [64, 64, 128, 128, 128, 256, 256, 256, 256, 256, 256], 6],
        [11, 64, 32, 100, [8, 8, 16, 32, 64, 128, 256, 256, 256, 512, 512], 7],
        [11, 64, 32, 100, [4, 4, 8, 16, 16, 16, 64, 128, 256, 512, 1024], 8],
        [11, 64, 32, 100, [128, 128, 128, 128, 128, 128, 128, 128, 256, 256, 512], 9],
        [12, 64, 32, 100, [8, 8, 16, 16, 16, 64, 64, 64, 256, 512, 512, 512], 0],
        [12, 64, 32, 100, [4, 4, 8, 16, 16, 16, 64, 64, 64, 256, 512, 1024], 1],
        [12, 64, 32, 100, [4, 4, 4, 4, 8, 8, 32, 64, 128, 256, 512, 1024], 2],
        [12, 64, 32, 100, [8, 8, 8, 8, 16, 16, 32, 32, 128, 256, 512, 1024], 3],
        [12, 64, 32, 100, [8, 8, 16, 32, 32, 32, 128, 256, 256, 256, 512, 512], 4],
        [12, 64, 32, 100, [4, 4, 8, 8, 8, 32, 64, 64, 64, 256, 512, 1024], 5],
        [12, 64, 32, 100, [8, 8, 16, 16, 16, 32, 32, 64, 64, 256, 512, 1024], 6],
        [12, 64, 32, 100, [8, 8, 8, 8, 32, 32, 32, 64, 64, 256, 512, 1024], 7],
        [12, 64, 32, 100, [16, 16, 32, 32, 32, 128, 256, 256, 256, 256, 256, 512], 8],
        [12, 64, 32, 100, [32, 32, 64, 64, 64, 256, 256, 256, 256, 256, 256, 256], 9],
        [
            13,
            64,
            32,
            100,
            [8, 8, 16, 32, 64, 128, 128, 128, 256, 256, 256, 256, 512],
            0,
        ],
        [13, 64, 32, 100, [16, 16, 32, 32, 32, 64, 64, 64, 64, 128, 256, 256, 1024], 1],
        [
            13,
            64,
            32,
            100,
            [32, 32, 64, 64, 64, 64, 64, 128, 256, 256, 256, 256, 512],
            2,
        ],
        [13, 64, 32, 100, [4, 4, 8, 16, 32, 32, 32, 128, 256, 256, 256, 512, 512], 3],
        [13, 64, 32, 100, [32, 32, 32, 32, 32, 32, 32, 32, 256, 256, 256, 512, 512], 4],
        [13, 64, 32, 100, [4, 4, 4, 4, 8, 8, 32, 64, 128, 128, 128, 512, 1024], 5],
        [13, 64, 32, 100, [4, 4, 4, 4, 16, 32, 64, 128, 128, 128, 512, 512, 512], 6],
        [13, 64, 32, 100, [8, 8, 16, 32, 32, 32, 64, 64, 128, 128, 256, 256, 1024], 7],
        [
            13,
            64,
            32,
            100,
            [64, 64, 64, 64, 64, 64, 64, 64, 128, 128, 128, 128, 1024],
            8,
        ],
        [13, 64, 32, 100, [8, 8, 8, 8, 32, 64, 64, 64, 64, 64, 128, 512, 1024], 9],
        [14, 64, 32, 100, [4, 4, 4, 4, 16, 32, 64, 64, 64, 64, 64, 128, 512, 1024], 0],
        [
            14,
            64,
            32,
            100,
            [4, 4, 8, 16, 32, 32, 32, 64, 64, 256, 256, 256, 512, 512],
            1,
        ],
        [14, 64, 32, 100, [8, 8, 8, 8, 8, 8, 16, 32, 32, 128, 256, 256, 256, 1024], 2],
        [
            14,
            64,
            32,
            100,
            [16, 16, 16, 16, 16, 16, 16, 16, 128, 128, 128, 512, 512, 512],
            3,
        ],
        [
            14,
            64,
            32,
            100,
            [16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 128, 128, 512, 1024],
            4,
        ],
        [14, 64, 32, 100, [8, 8, 8, 8, 32, 32, 32, 32, 32, 64, 128, 128, 512, 1024], 5],
        [
            14,
            64,
            32,
            100,
            [16, 16, 16, 16, 16, 16, 32, 64, 64, 64, 64, 128, 512, 1024],
            6,
        ],
        [
            14,
            64,
            32,
            100,
            [8, 8, 8, 8, 32, 64, 64, 64, 256, 256, 256, 256, 256, 512],
            7,
        ],
        [
            14,
            64,
            32,
            100,
            [16, 16, 16, 16, 16, 16, 32, 32, 32, 64, 256, 512, 512, 512],
            8,
        ],
        [
            14,
            64,
            32,
            100,
            [16, 16, 16, 16, 32, 32, 32, 32, 64, 256, 256, 256, 512, 512],
            9,
        ],
        [
            15,
            64,
            32,
            100,
            [16, 16, 16, 16, 16, 16, 16, 16, 32, 32, 64, 256, 512, 512, 512],
            0,
        ],
        [
            15,
            64,
            32,
            100,
            [4, 4, 4, 4, 16, 32, 32, 32, 64, 64, 256, 256, 256, 512, 512],
            1,
        ],
        [
            15,
            64,
            32,
            100,
            [4, 4, 4, 4, 8, 8, 8, 8, 16, 64, 128, 256, 256, 256, 1024],
            2,
        ],
        [
            15,
            64,
            32,
            100,
            [8, 8, 8, 8, 32, 32, 32, 64, 64, 64, 64, 128, 512, 512, 512],
            3,
        ],
        [
            15,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 16, 16, 32, 32, 32, 64, 256, 256, 256, 1024],
            4,
        ],
        [
            15,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 32, 32, 32, 32, 32, 32, 32, 256, 512, 1024],
            5,
        ],
        [
            15,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 32, 64, 64, 64, 128, 128, 128, 128, 256, 1024],
            6,
        ],
        [
            15,
            64,
            32,
            100,
            [8, 8, 16, 32, 32, 32, 64, 64, 256, 256, 256, 256, 256, 256, 256],
            7,
        ],
        [15, 64, 32, 100, [4, 4, 8, 8, 8, 8, 8, 8, 8, 64, 64, 64, 256, 512, 1024], 8],
        [
            15,
            64,
            32,
            100,
            [16, 16, 32, 32, 32, 64, 64, 128, 128, 256, 256, 256, 256, 256, 256],
            9,
        ],
        [
            16,
            64,
            32,
            100,
            [8, 8, 16, 32, 32, 32, 32, 32, 64, 128, 128, 128, 128, 256, 512, 512],
            0,
        ],
        [
            16,
            64,
            32,
            100,
            [4, 4, 8, 16, 32, 32, 32, 64, 64, 128, 128, 128, 128, 128, 128, 1024],
            1,
        ],
        [
            16,
            64,
            32,
            100,
            [4, 4, 4, 4, 8, 8, 32, 32, 32, 128, 256, 256, 256, 256, 256, 512],
            2,
        ],
        [
            16,
            64,
            32,
            100,
            [4, 4, 4, 4, 8, 8, 16, 16, 32, 32, 64, 64, 256, 512, 512, 512],
            3,
        ],
        [
            16,
            64,
            32,
            100,
            [16, 16, 16, 16, 32, 32, 32, 32, 32, 32, 128, 128, 128, 128, 256, 1024],
            4,
        ],
        [
            16,
            64,
            32,
            100,
            [4, 4, 4, 4, 4, 4, 8, 16, 16, 64, 64, 64, 256, 256, 256, 1024],
            5,
        ],
        [
            16,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 16, 16, 32, 32, 64, 64, 256, 256, 256, 512, 512],
            6,
        ],
        [
            16,
            64,
            32,
            100,
            [32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 64, 256, 256, 256, 256, 512],
            7,
        ],
        [
            16,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 32, 32, 128, 128, 128, 128, 128, 256, 256, 256, 512],
            8,
        ],
        [
            16,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 16, 16, 16, 16, 32, 32, 64, 128, 128, 512, 1024],
            9,
        ],
        [
            17,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 16, 16, 32, 64, 64, 64, 64, 64, 64, 512, 512, 512],
            0,
        ],
        [
            17,
            64,
            32,
            100,
            [16, 16, 32, 32, 32, 32, 32, 32, 32, 64, 64, 64, 64, 128, 128, 256, 1024],
            1,
        ],
        [
            17,
            64,
            32,
            100,
            [4, 4, 4, 4, 8, 8, 16, 16, 64, 128, 256, 256, 256, 256, 256, 256, 256],
            2,
        ],
        [
            17,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 32, 32, 32, 64, 64, 64, 64, 128, 128, 128, 256, 1024],
            3,
        ],
        [
            17,
            64,
            32,
            100,
            [4, 4, 8, 16, 16, 16, 32, 32, 32, 32, 32, 32, 64, 64, 128, 512, 1024],
            4,
        ],
        [
            17,
            64,
            32,
            100,
            [
                16,
                16,
                16,
                16,
                32,
                32,
                128,
                128,
                128,
                128,
                128,
                128,
                128,
                128,
                128,
                256,
                512,
            ],
            5,
        ],
        [
            17,
            64,
            32,
            100,
            [
                32,
                32,
                32,
                32,
                32,
                32,
                64,
                128,
                128,
                128,
                128,
                128,
                128,
                256,
                256,
                256,
                256,
            ],
            6,
        ],
        [
            17,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 16, 16, 16, 16, 64, 64, 256, 256, 256, 256, 256, 512],
            7,
        ],
        [
            17,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 16, 16, 32, 32, 32, 64, 64, 64, 128, 256, 256, 1024],
            8,
        ],
        [
            17,
            64,
            32,
            100,
            [4, 4, 4, 4, 8, 8, 8, 8, 16, 16, 16, 32, 128, 256, 512, 512, 512],
            9,
        ],
        [
            18,
            64,
            32,
            100,
            [
                16,
                16,
                16,
                16,
                64,
                64,
                64,
                128,
                128,
                128,
                128,
                128,
                128,
                128,
                128,
                256,
                256,
                256,
            ],
            0,
        ],
        [
            18,
            64,
            32,
            100,
            [
                8,
                8,
                16,
                16,
                16,
                32,
                32,
                64,
                64,
                64,
                64,
                64,
                64,
                128,
                128,
                128,
                128,
                1024,
            ],
            1,
        ],
        [
            18,
            64,
            32,
            100,
            [
                16,
                16,
                16,
                16,
                32,
                32,
                64,
                64,
                128,
                128,
                128,
                128,
                128,
                128,
                256,
                256,
                256,
                256,
            ],
            2,
        ],
        [
            18,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 32, 32, 32, 64, 64, 128, 128, 128, 128, 256, 256, 256, 512],
            3,
        ],
        [
            18,
            64,
            32,
            100,
            [8, 8, 8, 8, 32, 32, 32, 64, 64, 64, 64, 128, 128, 128, 256, 256, 256, 512],
            4,
        ],
        [
            18,
            64,
            32,
            100,
            [8, 8, 16, 16, 16, 32, 32, 32, 32, 32, 32, 32, 32, 64, 128, 256, 256, 1024],
            5,
        ],
        [
            18,
            64,
            32,
            100,
            [8, 8, 8, 8, 16, 16, 32, 32, 64, 64, 64, 64, 128, 128, 128, 256, 512, 512],
            6,
        ],
        [
            18,
            64,
            32,
            100,
            [8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 32, 32, 64, 256, 256, 256, 512, 512],
            7,
        ],
        [
            18,
            64,
            32,
            100,
            [
                8,
                8,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                32,
                32,
                64,
                128,
                128,
                128,
                128,
                256,
                1024,
            ],
            8,
        ],
        [
            18,
            64,
            32,
            100,
            [16, 16, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 64, 64, 256, 512, 512],
            9,
        ],
        [
            19,
            64,
            32,
            100,
            [
                4,
                4,
                4,
                4,
                16,
                16,
                16,
                16,
                16,
                32,
                64,
                64,
                256,
                256,
                256,
                256,
                256,
                256,
                256,
            ],
            0,
        ],
        [
            19,
            64,
            32,
            100,
            [
                4,
                4,
                8,
                16,
                16,
                16,
                16,
                16,
                32,
                32,
                32,
                64,
                64,
                64,
                128,
                256,
                256,
                512,
                512,
            ],
            1,
        ],
        [
            19,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 8, 16, 32, 64, 64, 128, 128, 512, 1024],
            2,
        ],
        [
            19,
            64,
            32,
            100,
            [
                8,
                8,
                16,
                32,
                32,
                32,
                64,
                64,
                64,
                64,
                64,
                64,
                128,
                128,
                128,
                128,
                256,
                256,
                512,
            ],
            3,
        ],
        [
            19,
            64,
            32,
            100,
            [8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 16, 16, 16, 32, 64, 256, 512, 1024],
            4,
        ],
        [
            19,
            64,
            32,
            100,
            [
                4,
                4,
                8,
                16,
                16,
                16,
                32,
                32,
                32,
                32,
                64,
                128,
                128,
                256,
                256,
                256,
                256,
                256,
                256,
            ],
            5,
        ],
        [
            19,
            64,
            32,
            100,
            [
                4,
                4,
                4,
                4,
                16,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                64,
                128,
                256,
                256,
                1024,
            ],
            6,
        ],
        [
            19,
            64,
            32,
            100,
            [
                4,
                4,
                4,
                4,
                8,
                8,
                32,
                64,
                64,
                64,
                128,
                128,
                128,
                128,
                128,
                128,
                256,
                256,
                512,
            ],
            7,
        ],
        [
            19,
            64,
            32,
            100,
            [
                8,
                8,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                32,
                32,
                64,
                64,
                64,
                64,
                64,
                512,
                512,
                512,
            ],
            8,
        ],
        [
            19,
            64,
            32,
            100,
            [4, 4, 8, 8, 8, 32, 32, 32, 64, 64, 64, 64, 64, 64, 64, 64, 128, 256, 1024],
            9,
        ],
        [
            20,
            64,
            32,
            100,
            [
                16,
                16,
                16,
                16,
                16,
                16,
                32,
                64,
                64,
                64,
                64,
                64,
                64,
                64,
                64,
                128,
                256,
                256,
                256,
                512,
            ],
            0,
        ],
        [
            20,
            64,
            32,
            100,
            [
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                8,
                8,
                16,
                16,
                16,
                32,
                128,
                256,
                256,
                256,
                512,
                512,
            ],
            1,
        ],
        [
            20,
            64,
            32,
            100,
            [
                8,
                8,
                16,
                32,
                32,
                32,
                64,
                64,
                64,
                64,
                64,
                64,
                128,
                128,
                128,
                128,
                128,
                128,
                256,
                512,
            ],
            2,
        ],
        [
            20,
            64,
            32,
            100,
            [4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 16, 32, 32, 64, 64, 256, 256, 256, 512, 512],
            3,
        ],
        [
            20,
            64,
            32,
            100,
            [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 8, 8, 64, 128, 128, 128, 512, 1024],
            4,
        ],
        [
            20,
            64,
            32,
            100,
            [
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                32,
                32,
                32,
                32,
                32,
                64,
                64,
                64,
                128,
                256,
                256,
                1024,
            ],
            5,
        ],
        [
            20,
            64,
            32,
            100,
            [
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                32,
                32,
                32,
                32,
                128,
                128,
                128,
                128,
                256,
                256,
                256,
                512,
            ],
            6,
        ],
        [
            20,
            64,
            32,
            100,
            [
                8,
                8,
                16,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                64,
                128,
                128,
                128,
                256,
                256,
                256,
                512,
            ],
            7,
        ],
        [
            20,
            64,
            32,
            100,
            [
                4,
                4,
                8,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                32,
                32,
                64,
                128,
                128,
                128,
                128,
                128,
                128,
                1024,
            ],
            8,
        ],
        [
            20,
            64,
            32,
            100,
            [
                8,
                8,
                8,
                8,
                16,
                16,
                16,
                16,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                64,
                64,
                64,
                512,
                1024,
            ],
            9,
        ],
    ]

    for tasks, leaves, spines, test_num, task_distribution, file_num in tests:
        file_name = f"{tasks}_{leaves}_{spines}"
        cwd = os.getcwd()
        parent1 = os.path.dirname(cwd)

        test_file_dir = os.path.join(
            parent1, "MCF_spine_leaf", "new_special_multitests", file_name
        )
        test_file = os.path.join(test_file_dir, f"test_{file_num}.json")
        if os.path.exists(test_file):
            continue

        shared_dict = manager.dict()
        # shared_dict = {}
        generate_tests(
            tasks,
            leaves,
            spines,
            test_num,
            task_distribution,
            get_neighbor_ranking,
            lock,
            shared_dict,
        )
        test_rankings = []
        test_colorings = []
        for ranking, coloring in shared_dict.items():
            test_rankings.append(ranking)
            test_colorings.append(coloring)

        file_name = f"{tasks}_{leaves}_{spines}"
        cwd = os.getcwd()
        parent1 = os.path.dirname(cwd)

        test_file_dir = os.path.join(
            parent1, "MCF_spine_leaf", "new_special_multitests", file_name
        )
        # if not os.path.exists(test_file_dir):
        os.makedirs(test_file_dir, exist_ok=True)
        test_file = os.path.join(test_file_dir, f"test_{file_num}.json")
        color_file = os.path.join(test_file_dir, f"color_{file_num}.json")
        with open(test_file, "w") as f:
            f.truncate(0)
            json.dump(test_rankings, f)

        with open(color_file, "w") as f:
            f.truncate(0)
            json.dump(test_colorings, f)
